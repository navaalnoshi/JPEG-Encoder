/*----------------------------------------------------------------------------------
Module Name : cr_dct
Description : This module performs an 8x8 Discrete Cosine Transform (DCT) on 8-bit pixel
data for the Cr (chrominance-red) component of a JPEG image. It processes incoming pixel values and 
applies a 2D DCT to transform spatial-domain values into frequency-domain coefficients.
The module is based on a pipelined implementation that enables efficient
processing of image blocks in real-time JPEG compression systems. It 
accepts data serially and outputs 64 DCT coefficients labeled 
Z11_final to Z88_final, each 11 bits wide.
----------------------------------------------------------------------------------*/
timescale 1ns / 100ps

module cr_dct (
    input  logic        clk,             // Clock signal
    input  logic        rst,             // Reset signal
    input  logic        enable,          // Enable signal
    input  logic [7:0]  data_in,         // 8-bit input data
    // 8x8 matrix of 11-bit final DCT output coefficients
    output logic [10:0] Z_final [8][8],
    output logic        output_enable    // Output enable flag
);

// Define matrix dimensions
localparam N = 8;

// DCT matrix coefficients (scaled fixed-point representation)
localparam integer T1  = 5793;   // ≈ 0.3536
localparam integer T21 = 8035;   // ≈ 0.4904
localparam integer T22 = 6811;   // ≈ 0.4157
localparam integer T23 = 4551;   // ≈ 0.2778
localparam integer T24 = 1598;   // ≈ 0.0975
localparam integer T25 = -1598;  // ≈ -0.0975
localparam integer T26 = -4551;  // ≈ -0.2778
localparam integer T27 = -6811;  // ≈ -0.4157
localparam integer T28 = -8035;  // ≈ -0.4904
localparam integer T31 = 7568;   // ≈ 0.4619
localparam integer T32 = 3135;   // ≈ 0.1913
localparam integer T33 = -3135;  // ≈ -0.1913
localparam integer T34 = -7568;  // ≈ -0.4619
localparam integer T52 = -5793;  // ≈ -0.3536

// Inverse DCT matrix coefficients (scaled fixed-point representation)
localparam integer Ti1  = 5793;   // ≈ 0.3536
localparam integer Ti21 = 8035;   // ≈ 0.4904
localparam integer Ti22 = 6811;   // ≈ 0.4157
localparam integer Ti23 = 4551;   // ≈ 0.2778
localparam integer Ti24 = 1598;   // ≈ 0.0975
localparam integer Ti25 = -1598;  // ≈ -0.0975
localparam integer Ti26 = -4551;  // ≈ -0.2778
localparam integer Ti27 = -6811;  // ≈ -0.4157
localparam integer Ti28 = -8035;  // ≈ -0.4904
localparam integer Ti31 = 7568;   // ≈ 0.4619
localparam integer Ti32 = 3135;   // ≈ 0.1913
localparam integer Ti33 = -3135;  // ≈ -0.1913
localparam integer Ti34 = -7568;  // ≈ -0.4619
localparam integer Ti52 = -5793;  // ≈ -0.3536

// Use arrays for temporary Z value storage (8x8)
logic [31:0] Z_temp [N][N];
// 25-bit intermediate Z matrix values (8x8)
logic [24:0] Z [N][N];

// Final Cb outputs after multiple stages
logic [31:0] Cb_final_2 [N];
// Truncated 11-bit versions for output
logic [10:0] Cb_final_1 [N];
// Final differential Cb values (25-bit precision)
logic [24:0] Cb_final_diff [N];

// Integer variables used for temporary calculation or indexing
integer Cb_mul_input [N];
integer Ti_mul_input [N];

// 3-bit counters for state control
logic [2:0] count;
logic [2:0] count_of, count_of_copy;

// Internal control signals
logic count_1, count_3, count_4, count_5, count_6;
logic count_7, count_8, enable_1;
logic count_9, count_10;

// Register to hold input data temporarily
logic [7:0] data_1;

// Calculate Z_temp matrix values or reset them on reset 
always_ff @(posedge clk) begin : Z_TEMP_CALCULATION
    if (rst) begin
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z_temp[i][j] <= 0;
            end
        end
    end else if (enable_1 && count_8) begin
        for (int i = 0; i < N; i++) begin
            Z_temp[i][0] <= Cb_final_2[i] * Ti1;
            Z_temp[i][1] <= Cb_final_2[i] * Ti2_mul_input;
            Z_temp[i][2] <= Cb_final_2[i] * Ti3_mul_input;
            Z_temp[i][3] <= Cb_final_2[i] * Ti4_mul_input;
            Z_temp[i][4] <= Cb_final_2[i] * Ti5_mul_input;
            Z_temp[i][5] <= Cb_final_2[i] * Ti6_mul_input;
            Z_temp[i][6] <= Cb_final_2[i] * Ti7_mul_input;
            Z_temp[i][7] <= Cb_final_2[i] * Ti8_mul_input;
        end
    end
end

// Accumulate Z_temp values into Z matrix or reset it 
always_ff @(posedge clk) begin : Z_ACCUMULATION
    if (rst) begin
        // Clear all Z matrix values on reset 
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z[i][j] <= 0;
            end
        end
    end else if (count_8 && count_of == 1) begin
      // Reset Z matrix to 0 for accumulation stage 
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z[i][j] <= 0;
            end
        end
    end else if (enable && count_9) begin
        // Accumulate corresponding Z_temp values into Z matrix 
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z[i][j] <= Z_temp[i][j] + Z[i][j];
            end
        end
    end
end


// Final stage of IDCT: rounding and truncating 25-bit fixed-point results to 11-bit outputs
always_ff @(posedge clk) begin : FINAL_OUTPUT_CALCULATION
    if (rst) begin
        // Reset all final outputs to 0 
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z_final[i][j] <= 0;
            end
        end
    end else if (count_10 && count_of == 0) begin
       // Rounding: if bit 13 is 1, add 1 to the truncated value (round up) 
        for (int i = 0; i < N; i++) begin
            for (int j = 0; j < N; j++) begin
                Z_final[i][j] <= Z[i][j][13] ? Z[i][j][24:14] + 1 : Z[i][j][24:14];
            end
        end
    end
end


// output_enable signals the next block, the quantizer, that the input data is ready
always_ff @(posedge clk) begin
	if (rst) 
		output_enable <= 0;
	else if (!enable_1)
		output_enable <= 0;
	else if (count_10 == 0 || count_of) // disable when not at proper count
		output_enable <= 0;
	else if (count_10 && count_of == 0) // enable when timing is aligned
		output_enable <= 1;
end

// Multiply incoming data by constant T1 on enable
always_ff @(posedge clk) begin
	if (rst)
		Cb_temp_11 <= 0;
	else if (enable)
		Cb_temp_11 <= data_in * T1;
end  

// Accumulate Cb_temp_11 values into Cb11
always_ff @(posedge clk) begin
	if (rst)
		Cb11 <= 0;
	else if (count == 1 && enable == 1)
		Cb11 <= Cb_temp_11; // initialize
	else if (enable)
		Cb11 <= Cb_temp_11 + Cb11; // accumulate
end

// Multiply data_1 with the respective CbX_mul_input values when enable_1 is active
always_ff @(posedge clk) begin
	if (rst) begin
		// Reset all temporary Cb multiplication results
		Cb_temp_21 <= 0;
		Cb_temp_31 <= 0;
		Cb_temp_41 <= 0;
		Cb_temp_51 <= 0;
		Cb_temp_61 <= 0;
		Cb_temp_71 <= 0;
		Cb_temp_81 <= 0;
	end
	else if (!enable_1) begin
		// Clear outputs when not enabled
		Cb_temp_21 <= 0;
		Cb_temp_31 <= 0;
		Cb_temp_41 <= 0;
		Cb_temp_51 <= 0;
		Cb_temp_61 <= 0;
		Cb_temp_71 <= 0;
		Cb_temp_81 <= 0;
	end
	else begin
		// Perform multiplication with corresponding coefficients
		Cb_temp_21 <= data_1 * Cb2_mul_input; 
		Cb_temp_31 <= data_1 * Cb3_mul_input; 
		Cb_temp_41 <= data_1 * Cb4_mul_input; 
		Cb_temp_51 <= data_1 * Cb5_mul_input; 
		Cb_temp_61 <= data_1 * Cb6_mul_input; 
		Cb_temp_71 <= data_1 * Cb7_mul_input; 
		Cb_temp_81 <= data_1 * Cb8_mul_input; 
	end
end

// Accumulate results from temporary Cb calculations when enabled
always_ff @(posedge clk) begin
	if (rst) begin
		// Reset all Cb accumulators
		Cb21 <= 0;
		Cb31 <= 0;
		Cb41 <= 0;
		Cb51 <= 0;
		Cb61 <= 0;
		Cb71 <= 0;
		Cb81 <= 0;
	end
	else if (!enable_1) begin
		// Clear if not enabled
		Cb21 <= 0;
		Cb31 <= 0;
		Cb41 <= 0;
		Cb51 <= 0;
		Cb61 <= 0;
		Cb71 <= 0;
		Cb81 <= 0;
	end
	else begin
		// Accumulate partial multiplication results
		Cb21 <= Cb_temp_21 + Cb21;
		Cb31 <= Cb_temp_31 + Cb31;
		Cb41 <= Cb_temp_41 + Cb41;
		Cb51 <= Cb_temp_51 + Cb51;
		Cb61 <= Cb_temp_61 + Cb61;
		Cb71 <= Cb_temp_71 + Cb71;
		Cb81 <= Cb_temp_81 + Cb81;
	end
end

// Main counters for pipeline stage delays and control
always_ff @(posedge clk) begin
	if (rst) begin
		// Reset all pipeline delay counters
		count     <= 0;
		count_3   <= 0;
		count_4   <= 0;
		count_5   <= 0;
		count_6   <= 0;
		count_7   <= 0;
		count_8   <= 0;
		count_9   <= 0;
		count_10  <= 0;
	end
	else if (!enable) begin
		// Clear counters when not enabled
		count     <= 0;
		count_3   <= 0;
		count_4   <= 0;
		count_5   <= 0;
		count_6   <= 0;
		count_7   <= 0;
		count_8   <= 0;
		count_9   <= 0;
		count_10  <= 0;
	end
	else begin
		// Shift pipeline delay values
		count     <= count + 1;
		count_3   <= count_1;
		count_4   <= count_3;
		count_5   <= count_4;
		count_6   <= count_5;
		count_7   <= count_6;
		count_8   <= count_7;
		count_9   <= count_8;
		count_10  <= count_9;
	end
end

// Assert count_1 when count reaches 7 and enable is active
always_ff @(posedge clk) begin
	if (rst)
		count_1 <= 0;
	else if (count != 7 || !enable)
		count_1 <= 0;
	else
		count_1 <= 1;
end

// Overflow counter and backup for tracking block cycles
always_ff @(posedge clk) begin
	if (rst) begin
		count_of       <= 0;
		count_of_copy  <= 0;
	end
	else if (!enable) begin
		count_of       <= 0;
		count_of_copy  <= 0;
	end
	else if (count_1) begin
		count_of       <= count_of + 1;
		count_of_copy  <= count_of_copy + 1;
	end
end

// Final adjustment for Cb11 after subtracting DC bias (128 × 8 × T1 = 5932032)
always_ff @(posedge clk) begin
	if (rst) begin
		Cb11_final <= 0;
	end
	else if (count_3 && enable_1) begin
		Cb11_final <= Cb11 - 25'd5932032;
		// Centering pixel values around 0 by subtracting 128 offset
		// 128 × 8 × T1 = 5932032 is precomputed offset for DC component
	end
end

// Final values for Cb rows 2 to 8 and holding previous values for potential reuse
always_ff @(posedge clk) begin
	if (rst) begin
		Cb21_final <= 0; Cb21_final_prev <= 0;
		Cb31_final <= 0; Cb31_final_prev <= 0;
		Cb41_final <= 0; Cb41_final_prev <= 0;
		Cb51_final <= 0; Cb51_final_prev <= 0;
		Cb61_final <= 0; Cb61_final_prev <= 0;
		Cb71_final <= 0; Cb71_final_prev <= 0;
		Cb81_final <= 0; Cb81_final_prev <= 0;
	end
	else if (!enable_1) begin
		// Clear on disable
		Cb21_final <= 0; Cb21_final_prev <= 0;
		Cb31_final <= 0; Cb31_final_prev <= 0;
		Cb41_final <= 0; Cb41_final_prev <= 0;
		Cb51_final <= 0; Cb51_final_prev <= 0;
		Cb61_final <= 0; Cb61_final_prev <= 0;
		Cb71_final <= 0; Cb71_final_prev <= 0;
		Cb81_final <= 0; Cb81_final_prev <= 0;
	end
	else if (count_4 && enable_1) begin
		// Store current and previous values for rows 2–8
		Cb21_final <= Cb21; Cb21_final_prev <= Cb21_final;
		Cb31_final <= Cb31; Cb31_final_prev <= Cb31_final;
		Cb41_final <= Cb41; Cb41_final_prev <= Cb41_final;
		Cb51_final <= Cb51; Cb51_final_prev <= Cb51_final;
		Cb61_final <= Cb61; Cb61_final_prev <= Cb61_final;
		Cb71_final <= Cb71; Cb71_final_prev <= Cb71_final;
		Cb81_final <= Cb81; Cb81_final_prev <= Cb81_final;
	end
end


// Calculate difference between current and previous final values of rows 2 to 8
always_ff @(posedge clk) begin
	if (rst) begin
		Cb21_final_diff <= 0;
		Cb31_final_diff <= 0;
		Cb41_final_diff <= 0;
		Cb51_final_diff <= 0;
		Cb61_final_diff <= 0;
		Cb71_final_diff <= 0;
		Cb81_final_diff <= 0;
	end
	else if (count_5 && enable_1) begin
		// Difference computation: current - previous
		Cb21_final_diff <= Cb21_final - Cb21_final_prev;
		Cb31_final_diff <= Cb31_final - Cb31_final_prev;
		Cb41_final_diff <= Cb41_final - Cb41_final_prev;
		Cb51_final_diff <= Cb51_final - Cb51_final_prev;
		Cb61_final_diff <= Cb61_final - Cb61_final_prev;
		Cb71_final_diff <= Cb71_final - Cb71_final_prev;
		Cb81_final_diff <= Cb81_final - Cb81_final_prev;
	end
end

// Select T2* multiplier based on count for second row
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb2_mul_input <= T21;
		3'b001: Cb2_mul_input <= T22;
		3'b010: Cb2_mul_input <= T23;
		3'b011: Cb2_mul_input <= T24;
		3'b100: Cb2_mul_input <= T25;
		3'b101: Cb2_mul_input <= T26;
		3'b110: Cb2_mul_input <= T27;
		3'b111: Cb2_mul_input <= T28;
	endcase
end

// Select T3* multiplier based on count for third row (symmetric values)
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb3_mul_input <= T31;
		3'b001: Cb3_mul_input <= T32;
		3'b010: Cb3_mul_input <= T33;
		3'b011: Cb3_mul_input <= T34;
		3'b100: Cb3_mul_input <= T34;
		3'b101: Cb3_mul_input <= T33;
		3'b110: Cb3_mul_input <= T32;
		3'b111: Cb3_mul_input <= T31;
	endcase
end

// Select T4* multiplier based on count for fourth row (nonlinear pattern)
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb4_mul_input <= T22;
		3'b001: Cb4_mul_input <= T25;
		3'b010: Cb4_mul_input <= T28;
		3'b011: Cb4_mul_input <= T26;
		3'b100: Cb4_mul_input <= T23;
		3'b101: Cb4_mul_input <= T21;
		3'b110: Cb4_mul_input <= T24;
		3'b111: Cb4_mul_input <= T27;
	endcase
end

// Select T5* multiplier based on count for fifth row (symmetric repeated pattern)
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb5_mul_input <= T1;
		3'b001: Cb5_mul_input <= T52;
		3'b010: Cb5_mul_input <= T52;
		3'b011: Cb5_mul_input <= T1;
		3'b100: Cb5_mul_input <= T1;
		3'b101: Cb5_mul_input <= T52;
		3'b110: Cb5_mul_input <= T52;
		3'b111: Cb5_mul_input <= T1;
	endcase
end

// Select T6* multiplier based on count for sixth row (nonlinear mapping)
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb6_mul_input <= T23;
		3'b001: Cb6_mul_input <= T28;
		3'b010: Cb6_mul_input <= T24;
		3'b011: Cb6_mul_input <= T22;
		3'b100: Cb6_mul_input <= T27;
		3'b101: Cb6_mul_input <= T25;
		3'b110: Cb6_mul_input <= T21;
		3'b111: Cb6_mul_input <= T26;
	endcase
end

// Select T7* multiplier based on count for seventh row (symmetric pattern)
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb7_mul_input <= T32;
		3'b001: Cb7_mul_input <= T34;
		3'b010: Cb7_mul_input <= T31;
		3'b011: Cb7_mul_input <= T33;
		3'b100: Cb7_mul_input <= T33;
		3'b101: Cb7_mul_input <= T31;
		3'b110: Cb7_mul_input <= T34;
		3'b111: Cb7_mul_input <= T32;
	endcase
end


// Select T8* multiplier based on count for the eighth row
always_ff @(posedge clk) begin
	case (count)
		3'b000: Cb8_mul_input <= T24;
		3'b001: Cb8_mul_input <= T26;
		3'b010: Cb8_mul_input <= T22;
		3'b011: Cb8_mul_input <= T28;
		3'b100: Cb8_mul_input <= T21;
		3'b101: Cb8_mul_input <= T27;
		3'b110: Cb8_mul_input <= T23;
		3'b111: Cb8_mul_input <= T25;
	endcase
end

// Inverse DCT second row multipliers based on count_of_copy
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti2_mul_input <= Ti28;
		3'b001: Ti2_mul_input <= Ti21;
		3'b010: Ti2_mul_input <= Ti22;
		3'b011: Ti2_mul_input <= Ti23;
		3'b100: Ti2_mul_input <= Ti24;
		3'b101: Ti2_mul_input <= Ti25;
		3'b110: Ti2_mul_input <= Ti26;
		3'b111: Ti2_mul_input <= Ti27;
	endcase
end

// Inverse DCT third row multipliers with symmetry around center
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti3_mul_input <= Ti31;
		3'b001: Ti3_mul_input <= Ti31;
		3'b010: Ti3_mul_input <= Ti32;
		3'b011: Ti3_mul_input <= Ti33;
		3'b100: Ti3_mul_input <= Ti34;
		3'b101: Ti3_mul_input <= Ti34;
		3'b110: Ti3_mul_input <= Ti33;
		3'b111: Ti3_mul_input <= Ti32;
	endcase
end

// Inverse DCT fourth row multiplier selection based on count_of_copy
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti4_mul_input <= Ti27;
		3'b001: Ti4_mul_input <= Ti22;
		3'b010: Ti4_mul_input <= Ti25;
		3'b011: Ti4_mul_input <= Ti28;
		3'b100: Ti4_mul_input <= Ti26;
		3'b101: Ti4_mul_input <= Ti23;
		3'b110: Ti4_mul_input <= Ti21;
		3'b111: Ti4_mul_input <= Ti24;
	endcase
end

// Inverse DCT fifth row: repeated Ti1 and Ti52 pattern
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti5_mul_input <= Ti1;
		3'b001: Ti5_mul_input <= Ti1;
		3'b010: Ti5_mul_input <= Ti52;
		3'b011: Ti5_mul_input <= Ti52;
		3'b100: Ti5_mul_input <= Ti1;
		3'b101: Ti5_mul_input <= Ti1;
		3'b110: Ti5_mul_input <= Ti52;
		3'b111: Ti5_mul_input <= Ti52;
	endcase
end

// Inverse DCT sixth row multiplier selection
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti6_mul_input <= Ti26;
		3'b001: Ti6_mul_input <= Ti23;
		3'b010: Ti6_mul_input <= Ti28;
		3'b011: Ti6_mul_input <= Ti24;
		3'b100: Ti6_mul_input <= Ti22;
		3'b101: Ti6_mul_input <= Ti27;
		3'b110: Ti6_mul_input <= Ti25;
		3'b111: Ti6_mul_input <= Ti21;
	endcase
end


// Inverse DCT seventh row multiplier selection
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti7_mul_input <= Ti32;
		3'b001: Ti7_mul_input <= Ti32;
		3'b010: Ti7_mul_input <= Ti34;
		3'b011: Ti7_mul_input <= Ti31;
		3'b100: Ti7_mul_input <= Ti33;
		3'b101: Ti7_mul_input <= Ti33;
		3'b110: Ti7_mul_input <= Ti31;
		3'b111: Ti7_mul_input <= Ti34;
	endcase
end

// Inverse DCT eighth row multiplier selection
always_ff @(posedge clk) begin
	case (count_of_copy)
		3'b000: Ti8_mul_input <= Ti25;
		3'b001: Ti8_mul_input <= Ti24;
		3'b010: Ti8_mul_input <= Ti26;
		3'b011: Ti8_mul_input <= Ti22;
		3'b100: Ti8_mul_input <= Ti28;
		3'b101: Ti8_mul_input <= Ti21;
		3'b110: Ti8_mul_input <= Ti27;
		3'b111: Ti8_mul_input <= Ti23;
	endcase
end

//-----------------------------
// Rounding Stage
//-----------------------------
always_ff @(posedge clk) begin
	if (rst) begin
		data_1 <= 0;
		Cb11_final_1 <= 0; Cb21_final_1 <= 0; Cb31_final_1 <= 0; Cb41_final_1 <= 0;
		Cb51_final_1 <= 0; Cb61_final_1 <= 0; Cb71_final_1 <= 0; Cb81_final_1 <= 0;
		Cb11_final_2 <= 0; Cb21_final_2 <= 0; Cb31_final_2 <= 0; Cb41_final_2 <= 0;
		Cb51_final_2 <= 0; Cb61_final_2 <= 0; Cb71_final_2 <= 0; Cb81_final_2 <= 0;
		Cb11_final_3 <= 0; Cb11_final_4 <= 0;
	end else if (enable) begin
		// Pass input to next stage
		data_1 <= data_in;

		// Round and sign-extend Cb11
		Cb11_final_1 <= Cb11_final[13] ? Cb11_final[24:14] + 1 : Cb11_final[24:14];
		Cb11_final_2[31:11] <= Cb11_final_1[10] ? 21'h1FFFFF : 21'd0;  // sign extension
		Cb11_final_2[10:0] <= Cb11_final_1;
		Cb11_final_3 <= Cb11_final_2;
		Cb11_final_4 <= Cb11_final_3;

		// Round and sign-extend Cb21
		Cb21_final_1 <= Cb21_final_diff[13] ? Cb21_final_diff[24:14] + 1 : Cb21_final_diff[24:14];
		Cb21_final_2[31:11] <= Cb21_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb21_final_2[10:0] <= Cb21_final_1;

		// Round and sign-extend Cb31
		Cb31_final_1 <= Cb31_final_diff[13] ? Cb31_final_diff[24:14] + 1 : Cb31_final_diff[24:14];
		Cb31_final_2[31:11] <= Cb31_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb31_final_2[10:0] <= Cb31_final_1;

		// Round and sign-extend Cb41
		Cb41_final_1 <= Cb41_final_diff[13] ? Cb41_final_diff[24:14] + 1 : Cb41_final_diff[24:14];
		Cb41_final_2[31:11] <= Cb41_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb41_final_2[10:0] <= Cb41_final_1;

		// Round and sign-extend Cb51
		Cb51_final_1 <= Cb51_final_diff[13] ? Cb51_final_diff[24:14] + 1 : Cb51_final_diff[24:14];
		Cb51_final_2[31:11] <= Cb51_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb51_final_2[10:0] <= Cb51_final_1;

		// Round and sign-extend Cb61
		Cb61_final_1 <= Cb61_final_diff[13] ? Cb61_final_diff[24:14] + 1 : Cb61_final_diff[24:14];
		Cb61_final_2[31:11] <= Cb61_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb61_final_2[10:0] <= Cb61_final_1;

		// Round and sign-extend Cb71
		Cb71_final_1 <= Cb71_final_diff[13] ? Cb71_final_diff[24:14] + 1 : Cb71_final_diff[24:14];
		Cb71_final_2[31:11] <= Cb71_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb71_final_2[10:0] <= Cb71_final_1;

		// Round and sign-extend Cb81
		Cb81_final_1 <= Cb81_final_diff[13] ? Cb81_final_diff[24:14] + 1 : Cb81_final_diff[24:14];
		Cb81_final_2[31:11] <= Cb81_final_1[10] ? 21'h1FFFFF : 21'd0;
		Cb81_final_2[10:0] <= Cb81_final_1;

		/* Notes:
		 - Bit 13 is the rounding bit (LSB of integer part)
		 - Bits 24:14 hold the integer result after fixed-point scaling
		 - Sign-extension preserves negative values in 2's complement form
		*/
	end
end

//-----------------------------
// Pipeline Control Enable Signal (1-cycle delay)
//-----------------------------
always_ff @(posedge clk) begin
	if (rst)
		enable_1 <= 1'b0;
	else
		enable_1 <= enable;
end

endmodule



endmodule
